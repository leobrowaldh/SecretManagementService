// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Db.Migrations
{
    [DbContext(typeof(SmsDbContext))]
    [Migration("20250414133204_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Db.DbModels.ApiEndpoint", b =>
                {
                    b.Property<Guid>("ApiEndpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HttpMethod")
                        .HasColumnType("int");

                    b.Property<string>("QueryParametersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SecretId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StrHttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApiEndpointId");

                    b.HasIndex("SecretId");

                    b.ToTable("ApiEndpoints", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MicrosoftGraphApiAppId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Applications", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Email", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("EmailId");

                    b.ToTable("Emails", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Phone", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("PhoneId");

                    b.ToTable("Phones", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Secret", b =>
                {
                    b.Property<Guid>("SecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ContactByApiEndpoint")
                        .HasColumnType("bit");

                    b.Property<bool>("ContactByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ContactBySMS")
                        .HasColumnType("bit");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastTimeNotified")
                        .HasColumnType("datetime2");

                    b.Property<string>("MicrosoftGraphApiKeyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SecretId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Secrets", "usr");
                });

            modelBuilder.Entity("Db.DbModels.Subscriber", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MicrosoftGraphOwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("SubscriberId");

                    b.ToTable("Subscribers", "suprusr");
                });

            modelBuilder.Entity("EmailSecret", b =>
                {
                    b.Property<Guid>("EmailsEmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecretsSecretId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailsEmailId", "SecretsSecretId");

                    b.HasIndex("SecretsSecretId");

                    b.ToTable("EmailSecret", "suprusr");
                });

            modelBuilder.Entity("PhoneSecret", b =>
                {
                    b.Property<Guid>("PhonesPhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecretsSecretId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhonesPhoneId", "SecretsSecretId");

                    b.HasIndex("SecretsSecretId");

                    b.ToTable("PhoneSecret", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.ApiEndpoint", b =>
                {
                    b.HasOne("Db.DbModels.Secret", "Secret")
                        .WithMany("ApiEndpoints")
                        .HasForeignKey("SecretId");

                    b.Navigation("Secret");
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("Applications")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Db.DbModels.Secret", b =>
                {
                    b.HasOne("Db.DbModels.Application", "Application")
                        .WithMany("Secrets")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("Secrets")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("EmailSecret", b =>
                {
                    b.HasOne("Db.DbModels.Email", null)
                        .WithMany()
                        .HasForeignKey("EmailsEmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.DbModels.Secret", null)
                        .WithMany()
                        .HasForeignKey("SecretsSecretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhoneSecret", b =>
                {
                    b.HasOne("Db.DbModels.Phone", null)
                        .WithMany()
                        .HasForeignKey("PhonesPhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.DbModels.Secret", null)
                        .WithMany()
                        .HasForeignKey("SecretsSecretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("Db.DbModels.Secret", b =>
                {
                    b.Navigation("ApiEndpoints");
                });

            modelBuilder.Entity("Db.DbModels.Subscriber", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}

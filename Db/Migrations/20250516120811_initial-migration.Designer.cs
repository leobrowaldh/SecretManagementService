// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Db.Migrations
{
    [DbContext(typeof(SmsDbContext))]
    [Migration("20250516120811_initial-migration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Db.DbModels.ApiEndpoint", b =>
                {
                    b.Property<Guid>("ApiEndpointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HttpMethod")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("QueryParametersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StrHttpMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApiEndpointId");

                    b.HasIndex("SubscriberId")
                        .IsUnique();

                    b.ToTable("ApiEndpoints", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.Property<Guid>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContactByApiEndpoint")
                        .HasColumnType("bit");

                    b.Property<bool>("ContactByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ContactBySMS")
                        .HasColumnType("bit");

                    b.Property<string>("ExternalApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExternalProvider")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("StrExternalProvider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ExternalApplicationId")
                        .HasDatabaseName("IX_Applications_ExternalApplicationId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Applications", "adm");
                });

            modelBuilder.Entity("Db.DbModels.Email", b =>
                {
                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Emails", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.EmailApplication", b =>
                {
                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("EmailAplications", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Phone", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhoneId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Phones", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.PhoneApplication", b =>
                {
                    b.Property<Guid>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PhoneId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("PhoneApplications", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.Secret", b =>
                {
                    b.Property<Guid>("SecretId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalSecretId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTimeNotified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("SecretId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Secrets", "usr");
                });

            modelBuilder.Entity("Db.DbModels.Subscriber", b =>
                {
                    b.Property<Guid>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("SubscriberIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriberId");

                    b.ToTable("Subscribers", "adm");
                });

            modelBuilder.Entity("Db.DbModels.SubscriberUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "SubscriberId");

                    b.HasIndex("SubscriberId");

                    b.ToTable("SubscriberUsers", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users", "suprusr");
                });

            modelBuilder.Entity("Db.DbModels.ApiEndpoint", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithOne("ApiEndpoint")
                        .HasForeignKey("Db.DbModels.ApiEndpoint", "SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("Applications")
                        .HasForeignKey("SubscriberId");

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Db.DbModels.Email", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("Emails")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Db.DbModels.EmailApplication", b =>
                {
                    b.HasOne("Db.DbModels.Application", "Application")
                        .WithMany("EmailApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.DbModels.Email", "Email")
                        .WithMany("EmailApplications")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("Db.DbModels.Phone", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("Phones")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");
                });

            modelBuilder.Entity("Db.DbModels.PhoneApplication", b =>
                {
                    b.HasOne("Db.DbModels.Application", "Application")
                        .WithMany("PhoneApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.DbModels.Phone", "Phone")
                        .WithMany("PhoneApplications")
                        .HasForeignKey("PhoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Db.DbModels.Secret", b =>
                {
                    b.HasOne("Db.DbModels.Application", "Application")
                        .WithMany("Secrets")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Db.DbModels.SubscriberUser", b =>
                {
                    b.HasOne("Db.DbModels.Subscriber", "Subscriber")
                        .WithMany("SubscriberUsers")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Db.DbModels.User", "User")
                        .WithMany("SubscriberUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscriber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Db.DbModels.Application", b =>
                {
                    b.Navigation("EmailApplications");

                    b.Navigation("PhoneApplications");

                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("Db.DbModels.Email", b =>
                {
                    b.Navigation("EmailApplications");
                });

            modelBuilder.Entity("Db.DbModels.Phone", b =>
                {
                    b.Navigation("PhoneApplications");
                });

            modelBuilder.Entity("Db.DbModels.Subscriber", b =>
                {
                    b.Navigation("ApiEndpoint");

                    b.Navigation("Applications");

                    b.Navigation("Emails");

                    b.Navigation("Phones");

                    b.Navigation("SubscriberUsers");
                });

            modelBuilder.Entity("Db.DbModels.User", b =>
                {
                    b.Navigation("SubscriberUsers");
                });
#pragma warning restore 612, 618
        }
    }
}

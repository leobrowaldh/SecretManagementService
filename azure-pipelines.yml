# .NET Core Function App to Linux on Azure
# Build a .NET Core function app and deploy it to Azure as a Linux function App.

trigger:
- master
- develop

variables:
  azureSubscription: 'InnofactorManagedComponents-ServiceConnection'
  functionAppName: 'func-secretmanagementservice-development-001'
  vmImageName: 'ubuntu-latest'
  workingDirectory: '$(System.DefaultWorkingDirectory)/SecretManagementService'
  resourceGroup: 'LIA-ResourceGroup'

  # Environment variables
  keyVaultUri: 'https://sms-appsecrets.vault.azure.net/'
  clientId: '4e72630e-e7a9-444f-8287-c7b704149746'
  tenantId: 'd87548be-2c3c-454d-8214-8941643fc99f'
  environment: 'Development'
  hostId: 'func-secretmgmt-dev-001'
  daysUntilSecretsExpire: '30'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
        includePreviewVersions: true # Needed for .NET 9 preview builds

    - task: DotNetCoreCLI@2
      displayName: 'Publish Function App'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: |
          $(workingDirectory)/*.csproj
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/publish_output'
        zipAfterPublish: true

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/publish_output'
        artifact: 'drop'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@2
            displayName: 'Azure functions app deploy'
            inputs:
              isFlexConsumption: true
              connectedServiceNameARM: $(azureSubscription)
              appType: 'functionAppLinux'
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/*.zip'
              runtimeStack: 'DOTNET-ISOLATED|9.0'
              appSettings: >
                -KEY_VAULT_URI $(keyVaultUri)
                -CLIENT_ID $(clientId)
                -TENANT_ID $(tenantId)
                -AzureFunctionsWebHost__hostid $(hostId)
                -ASPNETCORE_ENVIRONMENT $(environment)
                -DAYS_UNTIL_SECRET_EXPIRES $(daysUntilSecretsExpire)

# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- develop

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'InnofactorManagedComponents-ServiceConnection'

  # Function app name
  functionAppName: 'func-secretmanagementservice-development-001'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/SecretManagementService'

  # Resource Group
  resourceGroup: 'LIA-ResourceGroup'

  #Env variables
  keyVaultUri: 'https://sms-appsecrets.vault.azure.net/'
  clientId: '4e72630e-e7a9-444f-8287-c7b704149746'
  tenantId: 'd87548be-2c3c-454d-8214-8941643fc99f'
  #Needed for ConfigureKeyVault method in Program.cs:
  environment: 'Development'
  #hostId must be less than 32 chars to avoid name collisions caused by truncation:
  hostId: 'func-secretmgmt-dev-001'
  #Configures when notification of expiring secrets should occur
  daysUntilSecretsExpire: '30'
  

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:

  - job: SetEnvironmentVariables
    displayName: "Extract and Set Environment Variables"
    steps:
      # Install jq for Linux-based deploy machine
      - script: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found. Installing jq..."
            sudo apt-get update
            sudo apt-get install -y jq
          fi
        displayName: "Install jq on Linux Deploy Machine"

      # Checking the directory structure
      - script: |
          echo "Directory structure:"
          ls $(System.DefaultWorkingDirectory)
          ls $(System.DefaultWorkingDirectory)/Scripts
        displayName: "Verify Directory Structure"


      # Run the environment variable extraction script
      - script: |
          chmod +x $(System.DefaultWorkingDirectory)/Scripts/export-env-vars.sh
          $(System.DefaultWorkingDirectory)/Scripts/export-env-vars.sh
        displayName: "Extract Environment Variables"

  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:

          - task: AzureFunctionApp@2
            displayName: 'Azure functions app deploy'
            inputs:
              isFlexConsumption: true
              connectedServiceNameARM: $(azureSubscription)
              appType: 'functionAppLinux'
              appName: $(functionAppName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack:  'DOTNET-ISOLATED|9.0'
              appSettings: >
                -KEY_VAULT_URI $(keyVaultUri)
                -CLIENT_ID $(clientId)
                -TENANT_ID $(tenantId)
                -AzureFunctionsWebHost__hostid $(hostId)
                -ASPNETCORE_ENVIRONMENT $(environment)
                -DAYS_UNTIL_SECRET_EXPIRES $(daysUntilSecretsExpire)